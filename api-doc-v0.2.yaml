---
openapi: "3.0.0"
info: 
    title: "JAGG Store Api"
    description: "JAGG store API"
    version: "0.2"
servers:
  - url: "https://jagg.konosprod.fr/api/"
paths:
  /:
    get:
      tags:
      - "API"
      description: "Get API info & version"
      responses:
        "200":
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiVersion'
                
  /maps:
    get:
      tags:
      - "Maps"
      description: "Get maps from the store"
      parameters:
        - in: "query"
          name: "offset"
          schema:
            type: "integer"
            minimum: 0
          required: false
          description: "The number of items to skip before starting to collect the result set."
        - in: "query"
          name: "orderby"
          schema:
            type: "integer"
          required: false
          description: "Filter maps"
      responses:
        "200":
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Maps"
    post:
      tags:
      - "Maps"
      description: "Create a new map"
      requestBody:
        content: 
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/MapCreate"
      responses:
        "200":
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Map"
                
  /maps/{mapid}:
    get:
      tags:
      - "Maps"
      description: "Get a map"
      parameters:
      - name: "mapid"
        in: "path"
        description: "Map id"
        required: true
        schema:
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Map"
    put:
      tags:
      - "Maps"
      description: "Update a map"
      parameters:
      - name: "mapid"
        in: "path"
        description: "Map id"
        required: true
        schema:
          type: "integer"
          format: "int64"
      requestBody:
        content: 
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/MapUpdate"
      responses:
        "200":
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Map"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
    delete:
      tags:
      - "Maps"
      description: "Delete a map"
      parameters:
      - name: "mapid"
        in: "path"
        description: "Map id"
        required: true
        schema:
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Deleted"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
                
  /maps/{mapid}/rate:
    put:
      tags:
      - "Maps"
      description: "Rate a map"
      parameters:
        - in: "query"
          name: "mapid"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Rated"
  
  /tags:
    get:
      tags:
      - "Tags"
      description: "Get all tags"
      parameters:
        - in: "query"
          name: "offset"
          schema:
            type: "integer"
            minimum: 0
          required: false
          description: "The number of items to skip before starting to collect the result set."
        - in: "query"
          name: "orderby"
          schema:
            type: "integer"
          required: false
          description: "Filter tags"
      responses:
        "200":
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tags"
    post:
      tags:
      - "Tags"
      description: "Create a new tag"
      requestBody:
        content: 
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/TagCreate"
      responses:
        "200":
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tag"
                
  /tags/{tagid}:
    get:
      tags:
      - "Tags"
      description: "Get all maps belonging to the tag"
      parameters:
        - name: "tagid"
          in: "path"
          description: "Tag id"
          required: true
          schema:
            type: "integer"
            format: "int64"
        - in: "query"
          name: "offset"
          schema:
            type: "integer"
            minimum: 0
          required: false
          description: "The number of items to skip before starting to collect the result set."
        - in: "query"
          name: "orderby"
          schema:
            type: "integer"
          required: false
          description: "Filter maps"
      responses:
        "200":
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Maps"
          
  /authors/{authorid}:  
    get:
      tags:
      - "Authors"
      description: "Get all maps belonging to the author"
      parameters:
        - name: "authorid"
          in: "path"
          description: "Author id"
          required: true
          schema:
            type: "integer"
            format: "int64"
        - in: "query"
          name: "offset"
          schema:
            type: "integer"
            minimum: 0
          required: false
          description: "The number of items to skip before starting to collect the result set."
        - in: "query"
          name: "orderby"
          schema:
            type: "integer"
          required: false
          description: "Filter maps"
      responses:
        "200":
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Maps"
  
components:
  schemas:
    
    ApiVersion:
      required:
      - "version"
      properties:
        version:
          type: string
    
    Maps:
      type: array
      items:
        $ref: "#/components/schemas/Map"
    
    Map:
      type: object
      properties:
        id:
          type: integer
          description: The map ID.
        created_at:
          type: string
          description: Date of creation
        updated_at:
          type: string
          description: Last update
        download_count:
          type: integer
          format: int64
          description: Download count
        path:
          type: string
          description: Download url
        name:
          type: string
          description: Name of the map
        rate:
          type: float
          format: int64
          description: Map rating
        tags:
          type: array
          items:
            $ref: "#/components/schemas/Tag"
        author:
            $ref: "#/components/schemas/Author"
    
    Tags: 
      type: array
      items:
        $ref: "#/components/schemas/Tag"
    
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Tag id
        tag:
          type: string
          description: Tag in itself
    
    Author:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Author id
        name:
          type: string
          description: Author name
    
    MapCreate:
      type: object
      required:
      - author
      - name
      - map
      properties:
        tags:
          description: Tags
          type: array
          items:
            type: string
        author:
          description: Author's name
          type: string
        name:
          description: Map name
          type: string
        map:
          description: Map file .map
          type: string
          format: binary
          
    MapUpdate:
      type: object
      properties:
        tags:
          description: Tags
          type: array
          items:
            type: string
        map:
          description: Map file .map
          type: string
          format: binary
      
    TagCreate:
      type: object
      required:
      - tag
      properties:
        tag:
          description: Tag itself
          type: string

    NotFound:
      type: object
      properties:
        message:
          type: string
          example: "Not found"
    
    Deleted:
      type: object
      properties:
        message:
          type: string
          example: "Deleted"
          
    Rated:
      type: object
      properties:
        message:
          type: string
          example: "Rated"
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
                
        
